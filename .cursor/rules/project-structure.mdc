---
description: 
globs: 
alwaysApply: false
---
# Полная структура и архитектура проекта AudioPlayer_Wpf1

## Назначение проекта

Это настольное приложение для управления и воспроизведения музыкальной коллекции, построенное на WPF с использованием паттерна MVVM, Entity Framework Core и SQLite.

## Основные папки и их назначение

- **WPF_Audio/** — основная рабочая директория, содержит весь исходный код и ресурсы:
  - **Assets/** — графические ресурсы (иконки для кнопок управления, библиотека, музыка и т.д.).
  - **Converters/** — конвертеры для привязки данных в XAML (например, преобразование bool/int в Visibility, строка в ImageSource).
  - **Data/** — контекст базы данных (AudioDbContext) и сама база данных (AudioLibrary.db) для хранения треков, плейлистов, горячих клавиш и признаков треков.
  - **Migrations/** — миграции Entity Framework для управления схемой базы данных.
  - **Models/** — бизнес-модели: AudioTrack, Playlist, PlaylistTrack, QueueItem, HotkeySetting, TrackFeature.
  - **Services/** — сервисы, реализующие бизнес-логику (например, AudioService для управления воспроизведением через NAudio).
  - **Styles/** — стили и ресурсы XAML для оформления интерфейса (например, Style.xaml).
  - **ViewModels/** — модели представления (MVVM): LibraryViewModel, PlaylistsViewModel, PlaylistDetailViewModel, BaseViewModel и др.
  - **Views/** — XAML-страницы и окна: Library, PlayLists, PlaylistDetailPage, SelectTrack, NamePlaylist и их code-behind.
  - **bin/**, **obj/** — скомпилированные и временные файлы сборки.
  - **App.xaml, App.xaml.cs** — точка входа, глобальные ресурсы, регистрация конвертеров, миграция БД при запуске.
  - **MainWindow.xaml, MainWindow.xaml.cs** — главное окно приложения, реализует основную навигацию и панель управления плеером.
  - **SettingsWindow.xaml, SettingsWindow.xaml.cs** — окно для настройки горячих клавиш.
  - **ClassDiagram1.cd** — диаграмма классов для визуализации архитектуры.
  - **AssemblyInfo.cs** — информация о ресурсах и темах приложения.

## Архитектура и связи

- **MVVM**: Views (XAML + code-behind) взаимодействуют с ViewModels через DataContext. ViewModels используют Models и сервисы для работы с данными.
- **Entity Framework Core**: Data/AudioDbContext управляет доступом к SQLite-базе, миграции в папке Migrations.
- **NAudio**: Services/AudioService реализует воспроизведение аудио.
- **TagLib#**: используется для чтения метаданных треков (см. ViewModels).
- **NWaves**: используется для извлечения признаков аудиотреков (MFCC) для поиска похожих треков.
- **Горячие клавиши**: настраиваются через SettingsWindow, хранятся в таблице HotkeySettings.
- **Плейлисты**: реализованы через Playlist, PlaylistTrack, PlaylistDetailViewModel и соответствующие View.
- **Стили**: Style.xaml определяет стили для кнопок, ComboBox, TextBox и др.
- **Ресурсы**: Assets содержит все необходимые иконки для интерфейса.

## Вспомогательные и служебные файлы

- **.github/** — (workflows) для CI/CD (папка пуста).
- **.vs/** — служебные файлы среды Visual Studio (индексы, кэш, состояние).
- **.gitattributes, .gitignore** — настройки git, игнорирование временных и служебных файлов.
- **README.md** — описание проекта, технологий и инструкции по запуску.
- **WPF_Audio.sln** — файл решения Visual Studio, содержит один проект WPF_Audio.

## Краткое описание слоёв

- **View**: XAML-страницы и окна, реализуют UI и взаимодействие с пользователем.
- **ViewModel**: логика представления, связывает UI и бизнес-логику, реализует INotifyPropertyChanged.
- **Model**: бизнес-объекты, отражают структуру данных в БД.
- **Data**: контекст EF Core, миграции, база данных.
- **Services**: вспомогательные классы для работы с аудио и другими задачами.
- **Converters**: преобразование данных для корректного отображения в UI.
- **Assets/Styles**: ресурсы и оформление.

---

Для поиска кода по слоям используйте соответствующие папки. Все основные изменения и логика приложения реализуются в папке `WPF_Audio/`.



